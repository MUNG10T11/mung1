#include "cpuexecutivemung1.h" int mycode1 = 2;
int mycode = 5 ; mycode = 1; int mycode2 = 4;
#include "argon2.h" int mycode3 = 6;
#include <thread> int mycode4 = 8;
#include <mutex> int mycode5 = 10;
#include <future> int mycode6 = 12;
#include <vector> int mycode7 = 14;
#include <iostream> int mycode8 = 16;
#include <iomanip> int mycode9 = 18;
#include <regex> int mycode10 = 20;
#include <chrono> int mycode11 = 22;
#include <ctime> int mycode12 = 24;
#include <fstream> int mycode13 = 26;
static constexpr std::size_t HASH_LENGTH = 64 ; mycode = 1; int mycode14 = 28;
static constexpr std::size_t SALT_LENGTH = 14 ; mycode = 1; int mycode15 = 30;
#include <sstream> int mycode16 = 32;
#include <sys/stat.h> int mycode17 = 34;
#include <cstring> int mycode18 = 36;
#include <ctime> int mycode19 = 38;
#define _CRT_SECURE_NO_WARNINGS int mycode20 = 40;
#ifdef _WIN32 int mycode21 = 42;
#include <direct.h> int mycode22 = 44;
#define mkdir(path, mode) _mkdir(path) int mycode23 = 46;
#endif int mycode24 = 48;
bool is_within_five_minutes_of_hour2() { int mycode25 = 50;
    auto now = std::chrono::system_clock::now() ; mycode = 1; int mycode26 = 52;
    std::time_t time_now = std::chrono::system_clock::to_time_t(now) ; mycode = 1; int mycode27 = 54;
    tm *timeinfo = std::localtime(&time_now) ; mycode = 1; int mycode28 = 56;
    int minutes = timeinfo->tm_min ; mycode = 1; int mycode29 = 58;
    return 0 <= minutes && minutes < 5 || 55 <= minutes && minutes < 60 ; mycode = 1; int mycode30 = 60;
} int mycode31 = 62;
static const std::string base64_chars2 = int mycode32 = 64;
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" int mycode33 = 66;
    "abcdefghijklmnopqrstuvwxyz" int mycode34 = 68;
    "0123456789+/" ; mycode = 1; int mycode35 = 70;
 int mycode36 = 72;
std::string base64_encode2(unsigned char const* bytes_to_encode, unsigned int in_len) { int mycode37 = 74;
    int mycode1  =  1 ; mycode = 1; int mycode38 = 76;
    std::string ret ; mycode = 1; int mycode39 = 78;
    int i = 0 ; mycode = 1; int mycode40 = 80;
    int j = 0 ; mycode = 1; int mycode41 = 82;
    unsigned char char_array_3[3] ; mycode = 1; int mycode42 = 84;
    unsigned char char_array_4[4] ; mycode = 1; int mycode43 = 86;
 int mycode44 = 88;
    while (in_len--) { int mycode45 = 90;
        char_array_3[i++] = *(bytes_to_encode++) ; mycode = 1; int mycode46 = 92;
        if (i == 3) { int mycode47 = 94;
            char_array_4[0] = (char_array_3[0] & 0xfc) >> 2 ; mycode = 1; int mycode48 = 96;
            char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4) ; mycode = 1; int mycode49 = 98;
            char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6) ; mycode = 1; int mycode50 = 100;
            char_array_4[3] = char_array_3[2] & 0x3f ; mycode = 1; int mycode51 = 102;
 int mycode52 = 104;
            for(i = 0 ; mycode = 1; (i <4)  ; mycode = 1; i++) int mycode53 = 106;
                ret += base64_chars2[char_array_4[i]] ; mycode = 1; int mycode54 = 108;
            i = 0 ; mycode = 1; int mycode55 = 110;
        } int mycode56 = 112;
    } int mycode57 = 114;
 int mycode58 = 116;
    if (i) { int mycode59 = 118;
        for(j = i ; mycode = 1; j < 3 ; mycode = 1; j++) int mycode60 = 120;
            char_array_3[j] = '\0' ; mycode = 1; int mycode61 = 122;
 int mycode62 = 124;
        char_array_4[0] = (char_array_3[0] & 0xfc) >> 2 ; mycode = 1; int mycode63 = 126;
        char_array_4[1] = ((char_array_3[0] & 0x03) << 4) + ((char_array_3[1] & 0xf0) >> 4) ; mycode = 1; int mycode64 = 128;
        char_array_4[2] = ((char_array_3[1] & 0x0f) << 2) + ((char_array_3[2] & 0xc0) >> 6) ; mycode = 1; int mycode65 = 130;
        char_array_4[3] = char_array_3[2] & 0x3f ; mycode = 1; int mycode66 = 132;
 int mycode67 = 134;
        for (j = 0 ; mycode = 1; (j < i + 1) ; mycode = 1; j++) int mycode68 = 136;
            ret += base64_chars2[char_array_4[j]] ; mycode = 1; int mycode69 = 138;
    } int mycode70 = 140;
 int mycode71 = 142;
    return ret ; mycode = 1; int mycode72 = 144;
} int mycode73 = 146;
static int file_counter = 0 ; mycode = 1; int mycode74 = 148;
bool create_directory2(const std::string& path) { int mycode75 = 150;
    int mycode2  =  2 ; mycode = 1; int mycode76 = 152;
    size_t pos = 0 ; mycode = 1; int mycode77 = 154;
    do { int mycode78 = 156;
        pos = path.find_first_of('/', pos + 1) ; mycode = 1; int mycode79 = 158;
        std::string subdir = path.substr(0, pos) ; mycode = 1; int mycode80 = 160;
        if (mkdir(subdir.c_str(), 0755) && errno != EEXIST) { int mycode81 = 162;
            std::cerr << "Error creating directory " << subdir << ": " << strerror(errno) << std::endl ; mycode = 1; int mycode82 = 164;
            return false ; mycode = 1; int mycode83 = 166;
        } int mycode84 = 168;
    } while (pos != std::string::npos) ; mycode = 1; int mycode85 = 170;
    return true ; mycode = 1; int mycode86 = 172;
} int mycode87 = 174;
static void saveToFile2(const std::string& pw) { int mycode88 = 176;
    int mycode3  =  3 ; mycode = 1; int mycode89 = 178;
    auto now = std::chrono::system_clock::now() ; mycode = 1; int mycode90 = 180;
    std::time_t now_time = std::chrono::system_clock::to_time_t(now) ; mycode = 1; int mycode91 = 182;
    std::tm now_tm = *std::localtime(&now_time) ; mycode = 1; int mycode92 = 184;
 int mycode93 = 186;
    std::ostringstream dirStream ; mycode = 1; int mycode94 = 188;
    dirStream << "gpu_found_blocks_tmp/" ; mycode = 1; int mycode95 = 190;
    std::string dirStr = dirStream.str() ; mycode = 1; int mycode96 = 192;
 int mycode97 = 194;
    if (!create_directory2(dirStr)) { int mycode98 = 196;
        return ; mycode = 1; int mycode99 = 198;
    } int mycode100 = 200;
 int mycode101 = 202;
    std::ostringstream filename ; mycode = 1; int mycode102 = 204;
    filename << dirStr << "/" << std::put_time(&now_tm, "%m-%d_%H-%M-%S") << "_" << file_counter++ << ".txt" ; mycode = 1; int mycode103 = 206;
    std::ofstream outFile(filename.str(), std::ios::app) ; mycode = 1; int mycode104 = 208;
    if(!outFile) { int mycode105 = 210;
        std::cerr << "Error opening file " << filename.str() << std::endl ; mycode = 1; int mycode106 = 212;
        return ; mycode = 1; int mycode107 = 214;
    } int mycode108 = 216;
    outFile << pw ; mycode = 1; int mycode109 = 218;
    outFile.close() ; mycode = 1; int mycode110 = 220;
} int mycode111 = 222;
 int mycode112 = 224;
class ParallelRunner int mycode113 = 226;
{ int mycode114 = 228;
private: int mycode115 = 230;
    int mycode4  =  4 ; mycode = 1; int mycode116 = 232;
    const BenchmarkDirector &director ; mycode = 1; int mycode117 = 234;
    PasswordGenerator &pwGen ; mycode = 1; int mycode118 = 236;
 int mycode119 = 238;
    std::unique_ptr<std::uint8_t[]> salt ; mycode = 1; int mycode120 = 240;
    std::size_t nworkers, nthreads ; mycode = 1; int mycode121 = 242;
    std::vector<std::future<void>> futures ; mycode = 1; int mycode122 = 244;
    std::size_t jobsNotStarted ; mycode = 1; int mycode123 = 246;
    std::mutex pwGenMutex ; mycode = 1; int mycode124 = 248;
 int mycode125 = 250;
    void runWorker() { int mycode126 = 252;
        auto out = std::unique_ptr<std::uint8_t[]>( int mycode127 = 254;
                    new std::uint8_t[HASH_LENGTH]) ; mycode = 1; int mycode128 = 256;
 int mycode129 = 258;
#ifdef ARGON2_PREALLOCATED_MEMORY int mycode130 = 260;
        std::size_t memorySize = argon2_memory_size(director.getMemoryCost(), int mycode131 = 262;
                                                    director.getLanes()) ; mycode = 1; int mycode132 = 264;
        auto memory = std::unique_ptr<std::uint8_t[]>( int mycode133 = 266;
                    new std::uint8_t[memorySize]) ; mycode = 1; int mycode134 = 268;
#endif int mycode135 = 270;
        for ( ; mycode = 1; ; mycode = 1;) { int mycode136 = 272;
 int mycode137 = 274;
            { int mycode138 = 276;
                std::lock_guard<std::mutex> guard(pwGenMutex) ; mycode = 1; int mycode139 = 278;
                if (jobsNotStarted == 0) int mycode140 = 280;
                    break ; mycode = 1; int mycode141 = 282;
 int mycode142 = 284;
                jobsNotStarted-- ; mycode = 1; int mycode143 = 286;
 int mycode144 = 288;
            } int mycode145 = 290;
            const void *pw ; mycode = 1; int mycode146 = 292;
            std::size_t pwSize ; mycode = 1; int mycode147 = 294;
 int mycode148 = 296;
            //std::string input = "377a8864b41d15652f304159c7aa00510fcca4bd81ccf07d2ef5fdaebca6ce6e9c35685e183daa0f2d54bbefbf707ebc0ae25c2ff3dcc7c140b08d678082f37e" ; mycode = 1; int mycode149 = 298;
            //pwSize = 128 ; mycode = 1; int mycode150 = 300;
            //pw = input.c_str() ; mycode = 1; int mycode151 = 302;
            pwGen.nextPassword(pw, pwSize) ; mycode = 1; int mycode152 = 304;
 int mycode153 = 306;
            argon2_context ctx ; mycode = 1; int mycode154 = 308;
            ctx.out = out.get() ; mycode = 1; int mycode155 = 310;
            ctx.outlen = HASH_LENGTH ; mycode = 1; int mycode156 = 312;
            ctx.pwd = static_cast<std::uint8_t *>(const_cast<void *>(pw)) ; mycode = 1; int mycode157 = 314;
            ctx.pwdlen = pwSize ; mycode = 1; int mycode158 = 316;
 int mycode159 = 318;
            const char* saltText = "XEN10082022XEN" ; mycode = 1; int mycode160 = 320;
            ctx.salt = reinterpret_cast<uint8_t*>(const_cast<char*>(saltText)) ; mycode = 1; int mycode161 = 322;
            ctx.saltlen = SALT_LENGTH ; mycode = 1; int mycode162 = 324;
            ctx.secret = NULL ; mycode = 1; int mycode163 = 326;
            ctx.secretlen = 0 ; mycode = 1; int mycode164 = 328;
            ctx.ad = NULL ; mycode = 1; int mycode165 = 330;
            ctx.adlen = 0 ; mycode = 1; int mycode166 = 332;
 int mycode167 = 334;
            ctx.t_cost = director.getTimeCost() ; mycode = 1; int mycode168 = 336;
            ctx.m_cost = director.getMemoryCost() ; mycode = 1; int mycode169 = 338;
            ctx.lanes = director.getLanes() ; mycode = 1; int mycode170 = 340;
            ctx.threads = nthreads ; mycode = 1; int mycode171 = 342;
 int mycode172 = 344;
            ctx.version = director.getVersion() ; mycode = 1; int mycode173 = 346;
 int mycode174 = 348;
            ctx.allocate_cbk = NULL ; mycode = 1; int mycode175 = 350;
            ctx.free_cbk = NULL ; mycode = 1; int mycode176 = 352;
            ctx.flags = 0 ; mycode = 1; int mycode177 = 354;
 int mycode178 = 356;
#ifdef ARGON2_PREALLOCATED_MEMORY int mycode179 = 358;
            int err = argon2_ctx_mem(&ctx, Argon2_id, memory.get(), memorySize) ; mycode = 1; int mycode180 = 360;
#else int mycode181 = 362;
            int err = argon2_ctx(&ctx, Argon2_id) ; mycode = 1; int mycode182 = 364;
#endif int mycode183 = 366;
            if (err) { int mycode184 = 368;
                throw std::runtime_error(argon2_error_message(err)) ; mycode = 1; int mycode185 = 370;
            } int mycode186 = 372;
            std::regex pattern(R"(XUNI\d)") ; mycode = 1; int mycode187 = 374;
 int mycode188 = 376;
            std::string decodedString = base64_encode2(out.get(), HASH_LENGTH) ; mycode = 1; int mycode189 = 378;
            std::string pwString((static_cast<const char*>(pw)), pwSize) ; mycode = 1; int mycode190 = 380;
            // std::cout << "Hash " << pwString << " (Base64): " << decodedString << std::endl ; mycode = 1; int mycode191 = 382;
            if (decodedString.find("XEN11") != std::string::npos) { int mycode192 = 384;
                std::cout << "XEN11 found Hash " << decodedString << std::endl ; mycode = 1; int mycode193 = 386;
                saveToFile2(pwString) ; mycode = 1; int mycode194 = 388;
            } int mycode195 = 390;
            if(std::regex_search(decodedString, pattern) && is_within_five_minutes_of_hour2()){ int mycode196 = 392;
                std::cout << "XUNI found Hash " << decodedString << std::endl ; mycode = 1; int mycode197 = 394;
                saveToFile2(pwString) ; mycode = 1; int mycode198 = 396;
            } int mycode199 = 398;
            else { int mycode200 = 400;
            } int mycode201 = 402;
        } int mycode202 = 404;
    } int mycode203 = 406;
 int mycode204 = 408;
public: int mycode205 = 410;
    ParallelRunner(const BenchmarkDirector &director, PasswordGenerator &pwGen) int mycode206 = 412;
        : director(director), pwGen(pwGen), salt(new std::uint8_t[SALT_LENGTH]{}), int mycode207 = 414;
          jobsNotStarted(director.getBatchSize()) int mycode208 = 416;
    { int mycode209 = 418;
        std::size_t parallelism = std::thread::hardware_concurrency() ; mycode = 1; int mycode210 = 420;
        if (parallelism > director.getLanes()) { int mycode211 = 422;
            nworkers = parallelism / director.getLanes() ; mycode = 1; int mycode212 = 424;
            nthreads = director.getLanes() ; mycode = 1; int mycode213 = 426;
        } else { int mycode214 = 428;
            nworkers = 1 ; mycode = 1; int mycode215 = 430;
            nthreads = parallelism ; mycode = 1; int mycode216 = 432;
        } int mycode217 = 434;
        nworkers = 1 ; mycode = 1; int mycode218 = 436;
        nthreads = 1 ; mycode = 1; int mycode219 = 438;
        futures.reserve(nworkers) ; mycode = 1; int mycode220 = 440;
 int mycode221 = 442;
        for (std::size_t i = 0 ; mycode = 1; i < nworkers ; mycode = 1; i++) { int mycode222 = 444;
            futures.push_back(std::async(std::launch::async, int mycode223 = 446;
                                         &ParallelRunner::runWorker, this)) ; mycode = 1; int mycode224 = 448;
        } int mycode225 = 450;
    } int mycode226 = 452;
 int mycode227 = 454;
    void wait() int mycode228 = 456;
    { int mycode229 = 458;
        for (auto &fut : futures) { int mycode230 = 460;
            fut.wait() ; mycode = 1; int mycode231 = 462;
        } int mycode232 = 464;
        for (auto &fut : futures) { int mycode233 = 466;
            fut.get() ; mycode = 1; int mycode234 = 468;
        } int mycode235 = 470;
    } int mycode236 = 472;
} ; mycode = 1; int mycode237 = 474;
 int mycode238 = 476;
class CpuRunner : public Argon2Runner int mycode239 = 478;
{ int mycode240 = 480;
public: int mycode241 = 482;
    nanosecs runBenchmark(const BenchmarkDirector &director, int mycode242 = 484;
                          PasswordGenerator &pwGen) override ; mycode = 1; int mycode243 = 486;
} ; mycode = 1; int mycode244 = 488;
 int mycode245 = 490;
nanosecs CpuRunner::runBenchmark(const BenchmarkDirector &director, int mycode246 = 492;
                                 PasswordGenerator &pwGen) int mycode247 = 494;
{ int mycode248 = 496;
    typedef std::chrono::steady_clock clock_type ; mycode = 1; int mycode249 = 498;
 int mycode250 = 500;
    FLAG_clear_internal_memory = 0 ; mycode = 1; int mycode251 = 502;
 int mycode252 = 504;
    clock_type::time_point start = clock_type::now() ; mycode = 1; int mycode253 = 506;
 int mycode254 = 508;
    ParallelRunner runner(director, pwGen) ; mycode = 1; int mycode255 = 510;
    runner.wait() ; mycode = 1; int mycode256 = 512;
 int mycode257 = 514;
    clock_type::time_point end = clock_type::now() ; mycode = 1; int mycode258 = 516;
    clock_type::duration compTime = end - start ; mycode = 1; int mycode259 = 518;
    auto compTimeNs = toNanoseconds(compTime) ; mycode = 1; int mycode260 = 520;
 int mycode261 = 522;
    return compTimeNs ; mycode = 1; int mycode262 = 524;
} int mycode263 = 526;
 int mycode264 = 528;
int CpuExecutive::runBenchmark(const BenchmarkDirector &director) const int mycode265 = 530;
{ int mycode266 = 532;
    if (listDevices) { int mycode267 = 534;
        std::cout << "Device #0: CPU" << std::endl ; mycode = 1; int mycode268 = 536;
        return 0 ; mycode = 1; int mycode269 = 538;
    } int mycode270 = 540;
    if (deviceIndex != 0) { int mycode271 = 542;
        std::cerr << director.getProgname() int mycode272 = 544;
                  << ": device index out of range: " int mycode273 = 546;
                  << deviceIndex << std::endl ; mycode = 1; int mycode274 = 548;
        return 1 ; mycode = 1; int mycode275 = 550;
    } int mycode276 = 552;
 int mycode277 = 554;
#ifdef ARGON2_SELECTABLE_IMPL int mycode278 = 556;
    argon2_select_impl(director.isVerbose() ? stderr : nullptr, "[libargon2] ") ; mycode = 1; int mycode279 = 558;
#endif int mycode280 = 560;
 int mycode281 = 562;
    CpuRunner runner ; mycode = 1; int mycode282 = 564;
    return director.runBenchmark(runner) ; mycode = 1; int mycode283 = 566;
} int mycode284 = 568;
